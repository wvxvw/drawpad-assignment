* Rationale
  The project will implement a limited subset of PostScript language
  sufficient to render simple (two-dimensional) geometrical shapes
  
  List of operators to implement:
  - =closepath=
  - =lineto=
  - =moveto=
  - =newpath=
  - =rlineto=
  - =rmoveto=
  - =fill=
  - =setlinewidth=
  - =stroke=
  - =showpage=
  - =setrgbcolor= 
    /not implementing/ =setgray= /in an effort to reduce the workload/
  
  If time allows, also implement basic control structures, words and loops.

  The reason for choosing PostScript over other candidtates, which I shall discuss
  shortly was that it is the oldest industry standards, has canonical text
  representation suitable for human reader, is easy to implement, can be
  implemented iteratively, can be compiled to opcodes to reduce the file size,
  can be trivially validated for basic syntax consistency, is backened by a standard.

  Below is the table of all other formats I've considered.

  | <8>      | <8>      | <8>      | <8>      | <8>      | <8>      |
  | Language | Human-readable | Industry support | Easy to implement | Expressivenes | Standard |
  |----------+----------+----------+----------+----------+----------|
  | SVG      | Yes      | Poor     | Moderate (difficult to extract a small subset) | Finite automata | Yes      |
  | SWF      | No       | Single vendor | Difficult | Turing-complete | Official white-paper |
  | LaTeX    | Yes      | Average  | Difficult | Turing-complete | No       |
  | PS       | Yes      | Good     | Easy     | Turing-complete | Official whitepaper |
  | XAML^1   | Yes      | Single vendor | Unknown  | Finite automata | Unknown  |
  | FXG^2    | Yes      | Single vendor | Easy (exists) | Finite automata | No       |

  1. I've not done much research on XAML graphic definition language simply because
     I don't like Microsoft products, all I know is that it is not a standard in
     any way and no tool outside Microsoft's own toolchain is using it.
  2. FXG is implemented in Flex compiler (the MXMLC), however its use is bounded
     by many additional requirement, some may impact human productivity, others
     will impact performance. This was largerly dismissed on the grounds of
     poor implementation.
     
  It was very tempting to simply use SWF format, perhaps drawing on the
  work previously done by =hxswfml= project. I would prefer this solution
  in the real world setting, however, the implementation seems too cumbersome
  for the test assignment.

* Project structure
** PostScript module
   - Parser
   - Interpreter
   
   The =PostScript= module will provide means of loading and parsing of
   the =PostScript= source code. It will receive input source code of a
   program paired with the drawing surface and emit the interpreted output
   into the surface.

** Tools
   - Keyboard Handler
   - Mouse Handler
   
   The =Tools= module will capture and interpret user's input into the
   executable commands.

** Stage
   - Canvas
   - Stash
   
   The =Stage= module will display the results of the user's commands.

** Bus
   - History
   - Server
   The =Bus= module will connect the parts and provide the interface
   to the outside world (load data, handle errors, persist data etc.)

** Effects
   The =Effects= module will provide a library of visual or sound effects
   performed when user's action is carried out.

* Technical description
  As of time of this writing I don't have enough experience to try
  to use =Stage3D= or similar modern rendering techniques, partially
  because of time limit and because of the development setting
  (=Stage3D= is buggy on Linux) this is out of scope for now.

  + Target Flash Player version: 11.8
  + SDK used for compilation: 4.11 (had to build from upstream developers
    version, there's not Linux distribution any more).
  + Porject uses Apache Ant 1.8.4, but most likely will work with 
    earlier versions too.

* Building
  The instructions are given for RHEL-like distro, based on my
  experience with Fedora Cora 18, ymmv.
  : # yum install ant git java-1.7.0-openjdk
  This was the easy part...
  Now, checkout Flex SDK:
  : $ cd ~
  : $ mkdir ./flex
  : $ cd ./flex
  : $ git clone https://git-wip-us.apache.org/repos/asf/flex-sdk.git sdk
  I will refer to =~/flex/flex-sdk= directory as =$FLEX_HOME=, if
  you cloned the SDK elsewhere, adjust your settings accordingly.
  Read carefuly the Flex SDK readme and prepare to build it.

  It should be only necessary that you build the compiler, this can
  be can be done like so:
  : $ cd $FLEX_SDK
  : $ ant modules
  You will only need =playerglobal.swc= and related part of the setup
  as outlined in the readme. You don't need to build or download
  neither TLF, nor AIR SDK. You will, however, need to download or
  build Batic Java library (used in compiler to transcode fonts).
  You don't need Blaze DS.

  Now you should be set to build the project. I will refer to
  project root directory as =$basedir=:
  : $ cd $basedir
  : $ vi ./build.xml
  Change the value of =$FLEX_HOME= variable to where you installed
  Flex SDK. Also change the value of =playerglobal= variable to
  where you downloaded =playerglobal.swc=
  : $ ant
  You should be all set up now.

* Testing
  There's a minimal test suite, to test run the tests:
  : $ ant test

* Running
  The project comes with a minimalist server written in Python.
  Hopefully, no additional setup will be required. To start the
  server:
  : $ cd $basedir/server
  : $ ./services.py &
  Now the project should be available at http://localhost:8080/
  See:
  : $ ./services.py --help
  for details on running the server.
